// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: addresses.sql

package db

import (
	"context"
	"time"

	"github.com/sqlc-dev/pqtype"
)

const createAddress = `-- name: CreateAddress :one
INSERT INTO addresses (
    ip_addr,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3
) RETURNING id, ip_addr, created_at, updated_at
`

type CreateAddressParams struct {
	IpAddr    pqtype.Inet
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateAddress(ctx context.Context, arg CreateAddressParams) (Address, error) {
	row := q.db.QueryRowContext(ctx, createAddress, arg.IpAddr, arg.CreatedAt, arg.UpdatedAt)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.IpAddr,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAddress = `-- name: DeleteAddress :one
DELETE FROM addresses
WHERE id = $1
RETURNING id, ip_addr, created_at, updated_at
`

func (q *Queries) DeleteAddress(ctx context.Context, id int32) (Address, error) {
	row := q.db.QueryRowContext(ctx, deleteAddress, id)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.IpAddr,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAddress = `-- name: GetAddress :one
SELECT id, ip_addr, created_at, updated_at FROM addresses WHERE id = $1
`

func (q *Queries) GetAddress(ctx context.Context, id int32) (Address, error) {
	row := q.db.QueryRowContext(ctx, getAddress, id)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.IpAddr,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAddressByEmail = `-- name: GetAddressByEmail :one
SELECT id, ip_addr, created_at, updated_at FROM addresses WHERE ip_addr = $1 LIMIT 1
`

func (q *Queries) GetAddressByEmail(ctx context.Context, ipAddr pqtype.Inet) (Address, error) {
	row := q.db.QueryRowContext(ctx, getAddressByEmail, ipAddr)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.IpAddr,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
