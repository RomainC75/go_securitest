// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: scan.sql

package db

import (
	"context"
	"time"
)

const createScan = `-- name: CreateScan :one
INSERT INTO scans (
    user_id,
    executed_at,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4
) RETURNING id, user_id, executed_at, created_at, updated_at
`

type CreateScanParams struct {
	UserID     int32
	ExecutedAt time.Time
	CreatedAt  time.Time
	UpdatedAt  time.Time
}

func (q *Queries) CreateScan(ctx context.Context, arg CreateScanParams) (Scan, error) {
	row := q.db.QueryRowContext(ctx, createScan,
		arg.UserID,
		arg.ExecutedAt,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Scan
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ExecutedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteScan = `-- name: DeleteScan :one
DELETE FROM scans
WHERE id = $1 AND user_id = $2
RETURNING id, user_id, executed_at, created_at, updated_at
`

type DeleteScanParams struct {
	ID     int32
	UserID int32
}

func (q *Queries) DeleteScan(ctx context.Context, arg DeleteScanParams) (Scan, error) {
	row := q.db.QueryRowContext(ctx, deleteScan, arg.ID, arg.UserID)
	var i Scan
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ExecutedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getScan = `-- name: GetScan :one
SELECT id, user_id, executed_at, created_at, updated_at FROM scans WHERE id = $1
`

func (q *Queries) GetScan(ctx context.Context, id int32) (Scan, error) {
	row := q.db.QueryRowContext(ctx, getScan, id)
	var i Scan
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ExecutedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listScansByUser = `-- name: ListScansByUser :many
SELECT id, user_id, executed_at, created_at, updated_at FROM scans WHERE user_id = $1 ORDER BY executed_at
`

func (q *Queries) ListScansByUser(ctx context.Context, userID int32) ([]Scan, error) {
	rows, err := q.db.QueryContext(ctx, listScansByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Scan{}
	for rows.Next() {
		var i Scan
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ExecutedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
