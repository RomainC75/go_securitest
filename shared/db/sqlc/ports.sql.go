// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: ports.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createPort = `-- name: CreatePort :one
INSERT INTO ports (
    ip_addr_id,
    port,
    state,
    executed_at
) VALUES (
    $1, $2, $3, $4
) RETURNING id, ip_addr_id, port, state, executed_at
`

type CreatePortParams struct {
	IpAddrID   int32
	Port       int32
	State      sql.NullBool
	ExecutedAt time.Time
}

func (q *Queries) CreatePort(ctx context.Context, arg CreatePortParams) (Port, error) {
	row := q.db.QueryRowContext(ctx, createPort,
		arg.IpAddrID,
		arg.Port,
		arg.State,
		arg.ExecutedAt,
	)
	var i Port
	err := row.Scan(
		&i.ID,
		&i.IpAddrID,
		&i.Port,
		&i.State,
		&i.ExecutedAt,
	)
	return i, err
}

const getPort = `-- name: GetPort :one
SELECT id, ip_addr_id, port, state, executed_at FROM ports WHERE id = $1
`

func (q *Queries) GetPort(ctx context.Context, id int32) (Port, error) {
	row := q.db.QueryRowContext(ctx, getPort, id)
	var i Port
	err := row.Scan(
		&i.ID,
		&i.IpAddrID,
		&i.Port,
		&i.State,
		&i.ExecutedAt,
	)
	return i, err
}

const getPortsByIpId = `-- name: GetPortsByIpId :many
SELECT id, ip_addr_id, port, state, executed_at FROM ports WHERE ip_addr_id = $1 ORDER BY port
`

func (q *Queries) GetPortsByIpId(ctx context.Context, ipAddrID int32) ([]Port, error) {
	rows, err := q.db.QueryContext(ctx, getPortsByIpId, ipAddrID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Port{}
	for rows.Next() {
		var i Port
		if err := rows.Scan(
			&i.ID,
			&i.IpAddrID,
			&i.Port,
			&i.State,
			&i.ExecutedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
